/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hk.org.hkbh.cms.outpatient.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import hk.org.hkbh.cms.outpatient.model.CodeDto;
import hk.org.hkbh.cms.outpatient.model.CodeDtoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CodeDto service. Represents a row in the &quot;Op_CodeDto&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CodeDtoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CodeDtoImpl}.
 * </p>
 *
 * @author Dave Man
 * @see CodeDtoImpl
 * @see CodeDto
 * @see CodeDtoModel
 * @generated
 */
@ProviderType
public class CodeDtoModelImpl extends BaseModelImpl<CodeDto>
	implements CodeDtoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a code dto model instance should use the {@link CodeDto} interface instead.
	 */
	public static final String TABLE_NAME = "Op_CodeDto";
	public static final Object[][] TABLE_COLUMNS = {
			{ "code_detail_id", Types.INTEGER },
			{ "master_code", Types.VARCHAR },
			{ "code_display_text_en", Types.VARCHAR },
			{ "code_display_text_chi", Types.VARCHAR },
			{ "code_active", Types.BOOLEAN },
			{ "subcode_enabled", Types.BOOLEAN },
			{ "code_remarks", Types.VARCHAR },
			{ "detail_code", Types.VARCHAR },
			{ "seq", Types.INTEGER },
			{ "code_detail_display_text_en", Types.VARCHAR },
			{ "code_detail_display_text_chi", Types.VARCHAR },
			{ "code_detail_active", Types.BOOLEAN },
			{ "level", Types.INTEGER },
			{ "up_level_id", Types.INTEGER },
			{ "code_detail_remarks", Types.VARCHAR },
			{ "create_date", Types.TIMESTAMP },
			{ "update_date", Types.TIMESTAMP },
			{ "created_by", Types.VARCHAR },
			{ "updated_by", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("code_detail_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("master_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_display_text_en", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_display_text_chi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_active", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("subcode_enabled", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("code_remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("detail_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("seq", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("code_detail_display_text_en", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_detail_display_text_chi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_detail_active", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("up_level_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("code_detail_remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("update_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updated_by", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Op_CodeDto (code_detail_id INTEGER not null primary key,master_code VARCHAR(75) null,code_display_text_en VARCHAR(75) null,code_display_text_chi VARCHAR(75) null,code_active BOOLEAN,subcode_enabled BOOLEAN,code_remarks VARCHAR(75) null,detail_code VARCHAR(75) null,seq INTEGER,code_detail_display_text_en VARCHAR(75) null,code_detail_display_text_chi VARCHAR(75) null,code_detail_active BOOLEAN,level INTEGER,up_level_id INTEGER,code_detail_remarks VARCHAR(75) null,create_date DATE null,update_date DATE null,created_by VARCHAR(75) null,updated_by VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Op_CodeDto";
	public static final String ORDER_BY_JPQL = " ORDER BY codeDto.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Op_CodeDto.code_detail_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.hk.org.hkbh.cms.outpatient.model.CodeDto"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.hk.org.hkbh.cms.outpatient.model.CodeDto"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.hk.org.hkbh.cms.outpatient.model.CodeDto"),
			true);
	public static final long MASTERCODE_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"lock.expiration.time.hk.org.hkbh.cms.outpatient.model.CodeDto"));

	public CodeDtoModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CodeDto.class;
	}

	@Override
	public String getModelClassName() {
		return CodeDto.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("masterCode", getMasterCode());
		attributes.put("codeDisplayTextEn", getCodeDisplayTextEn());
		attributes.put("codeDisplayTextChi", getCodeDisplayTextChi());
		attributes.put("codeActive", getCodeActive());
		attributes.put("subcodeEnabled", getSubcodeEnabled());
		attributes.put("codeRemarks", getCodeRemarks());
		attributes.put("detailCode", getDetailCode());
		attributes.put("seq", getSeq());
		attributes.put("codeDetailDisplayTextEn", getCodeDetailDisplayTextEn());
		attributes.put("codeDetailDisplayTextChi", getCodeDetailDisplayTextChi());
		attributes.put("codeDetailActive", getCodeDetailActive());
		attributes.put("level", getLevel());
		attributes.put("upLevelId", getUpLevelId());
		attributes.put("codeDetailRemarks", getCodeDetailRemarks());
		attributes.put("createDate", getCreateDate());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedBy", getUpdatedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String masterCode = (String)attributes.get("masterCode");

		if (masterCode != null) {
			setMasterCode(masterCode);
		}

		String codeDisplayTextEn = (String)attributes.get("codeDisplayTextEn");

		if (codeDisplayTextEn != null) {
			setCodeDisplayTextEn(codeDisplayTextEn);
		}

		String codeDisplayTextChi = (String)attributes.get("codeDisplayTextChi");

		if (codeDisplayTextChi != null) {
			setCodeDisplayTextChi(codeDisplayTextChi);
		}

		Boolean codeActive = (Boolean)attributes.get("codeActive");

		if (codeActive != null) {
			setCodeActive(codeActive);
		}

		Boolean subcodeEnabled = (Boolean)attributes.get("subcodeEnabled");

		if (subcodeEnabled != null) {
			setSubcodeEnabled(subcodeEnabled);
		}

		String codeRemarks = (String)attributes.get("codeRemarks");

		if (codeRemarks != null) {
			setCodeRemarks(codeRemarks);
		}

		String detailCode = (String)attributes.get("detailCode");

		if (detailCode != null) {
			setDetailCode(detailCode);
		}

		Integer seq = (Integer)attributes.get("seq");

		if (seq != null) {
			setSeq(seq);
		}

		String codeDetailDisplayTextEn = (String)attributes.get(
				"codeDetailDisplayTextEn");

		if (codeDetailDisplayTextEn != null) {
			setCodeDetailDisplayTextEn(codeDetailDisplayTextEn);
		}

		String codeDetailDisplayTextChi = (String)attributes.get(
				"codeDetailDisplayTextChi");

		if (codeDetailDisplayTextChi != null) {
			setCodeDetailDisplayTextChi(codeDetailDisplayTextChi);
		}

		Boolean codeDetailActive = (Boolean)attributes.get("codeDetailActive");

		if (codeDetailActive != null) {
			setCodeDetailActive(codeDetailActive);
		}

		Integer level = (Integer)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		Integer upLevelId = (Integer)attributes.get("upLevelId");

		if (upLevelId != null) {
			setUpLevelId(upLevelId);
		}

		String codeDetailRemarks = (String)attributes.get("codeDetailRemarks");

		if (codeDetailRemarks != null) {
			setCodeDetailRemarks(codeDetailRemarks);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getMasterCode() {
		if (_masterCode == null) {
			return "";
		}
		else {
			return _masterCode;
		}
	}

	@Override
	public void setMasterCode(String masterCode) {
		_columnBitmask |= MASTERCODE_COLUMN_BITMASK;

		if (_originalMasterCode == null) {
			_originalMasterCode = _masterCode;
		}

		_masterCode = masterCode;
	}

	public String getOriginalMasterCode() {
		return GetterUtil.getString(_originalMasterCode);
	}

	@Override
	public String getCodeDisplayTextEn() {
		if (_codeDisplayTextEn == null) {
			return "";
		}
		else {
			return _codeDisplayTextEn;
		}
	}

	@Override
	public void setCodeDisplayTextEn(String codeDisplayTextEn) {
		_codeDisplayTextEn = codeDisplayTextEn;
	}

	@Override
	public String getCodeDisplayTextChi() {
		if (_codeDisplayTextChi == null) {
			return "";
		}
		else {
			return _codeDisplayTextChi;
		}
	}

	@Override
	public void setCodeDisplayTextChi(String codeDisplayTextChi) {
		_codeDisplayTextChi = codeDisplayTextChi;
	}

	@Override
	public Boolean getCodeActive() {
		return _codeActive;
	}

	@Override
	public void setCodeActive(Boolean codeActive) {
		_codeActive = codeActive;
	}

	@Override
	public Boolean getSubcodeEnabled() {
		return _subcodeEnabled;
	}

	@Override
	public void setSubcodeEnabled(Boolean subcodeEnabled) {
		_subcodeEnabled = subcodeEnabled;
	}

	@Override
	public String getCodeRemarks() {
		if (_codeRemarks == null) {
			return "";
		}
		else {
			return _codeRemarks;
		}
	}

	@Override
	public void setCodeRemarks(String codeRemarks) {
		_codeRemarks = codeRemarks;
	}

	@Override
	public String getDetailCode() {
		if (_detailCode == null) {
			return "";
		}
		else {
			return _detailCode;
		}
	}

	@Override
	public void setDetailCode(String detailCode) {
		_detailCode = detailCode;
	}

	@Override
	public Integer getSeq() {
		return _seq;
	}

	@Override
	public void setSeq(Integer seq) {
		_seq = seq;
	}

	@Override
	public String getCodeDetailDisplayTextEn() {
		if (_codeDetailDisplayTextEn == null) {
			return "";
		}
		else {
			return _codeDetailDisplayTextEn;
		}
	}

	@Override
	public void setCodeDetailDisplayTextEn(String codeDetailDisplayTextEn) {
		_codeDetailDisplayTextEn = codeDetailDisplayTextEn;
	}

	@Override
	public String getCodeDetailDisplayTextChi() {
		if (_codeDetailDisplayTextChi == null) {
			return "";
		}
		else {
			return _codeDetailDisplayTextChi;
		}
	}

	@Override
	public void setCodeDetailDisplayTextChi(String codeDetailDisplayTextChi) {
		_codeDetailDisplayTextChi = codeDetailDisplayTextChi;
	}

	@Override
	public Boolean getCodeDetailActive() {
		return _codeDetailActive;
	}

	@Override
	public void setCodeDetailActive(Boolean codeDetailActive) {
		_codeDetailActive = codeDetailActive;
	}

	@Override
	public Integer getLevel() {
		return _level;
	}

	@Override
	public void setLevel(Integer level) {
		_level = level;
	}

	@Override
	public Integer getUpLevelId() {
		return _upLevelId;
	}

	@Override
	public void setUpLevelId(Integer upLevelId) {
		_upLevelId = upLevelId;
	}

	@Override
	public String getCodeDetailRemarks() {
		if (_codeDetailRemarks == null) {
			return "";
		}
		else {
			return _codeDetailRemarks;
		}
	}

	@Override
	public void setCodeDetailRemarks(String codeDetailRemarks) {
		_codeDetailRemarks = codeDetailRemarks;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return "";
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public CodeDto toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CodeDto)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CodeDtoImpl codeDtoImpl = new CodeDtoImpl();

		codeDtoImpl.setId(getId());
		codeDtoImpl.setMasterCode(getMasterCode());
		codeDtoImpl.setCodeDisplayTextEn(getCodeDisplayTextEn());
		codeDtoImpl.setCodeDisplayTextChi(getCodeDisplayTextChi());
		codeDtoImpl.setCodeActive(getCodeActive());
		codeDtoImpl.setSubcodeEnabled(getSubcodeEnabled());
		codeDtoImpl.setCodeRemarks(getCodeRemarks());
		codeDtoImpl.setDetailCode(getDetailCode());
		codeDtoImpl.setSeq(getSeq());
		codeDtoImpl.setCodeDetailDisplayTextEn(getCodeDetailDisplayTextEn());
		codeDtoImpl.setCodeDetailDisplayTextChi(getCodeDetailDisplayTextChi());
		codeDtoImpl.setCodeDetailActive(getCodeDetailActive());
		codeDtoImpl.setLevel(getLevel());
		codeDtoImpl.setUpLevelId(getUpLevelId());
		codeDtoImpl.setCodeDetailRemarks(getCodeDetailRemarks());
		codeDtoImpl.setCreateDate(getCreateDate());
		codeDtoImpl.setUpdateDate(getUpdateDate());
		codeDtoImpl.setCreatedBy(getCreatedBy());
		codeDtoImpl.setUpdatedBy(getUpdatedBy());

		codeDtoImpl.resetOriginalValues();

		return codeDtoImpl;
	}

	@Override
	public int compareTo(CodeDto codeDto) {
		int value = 0;

		if (getId() < codeDto.getId()) {
			value = -1;
		}
		else if (getId() > codeDto.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CodeDto)) {
			return false;
		}

		CodeDto codeDto = (CodeDto)obj;

		int primaryKey = codeDto.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CodeDtoModelImpl codeDtoModelImpl = this;

		codeDtoModelImpl._originalMasterCode = codeDtoModelImpl._masterCode;

		codeDtoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CodeDto> toCacheModel() {
		CodeDtoCacheModel codeDtoCacheModel = new CodeDtoCacheModel();

		codeDtoCacheModel.id = getId();

		codeDtoCacheModel.masterCode = getMasterCode();

		String masterCode = codeDtoCacheModel.masterCode;

		if ((masterCode != null) && (masterCode.length() == 0)) {
			codeDtoCacheModel.masterCode = null;
		}

		codeDtoCacheModel.codeDisplayTextEn = getCodeDisplayTextEn();

		String codeDisplayTextEn = codeDtoCacheModel.codeDisplayTextEn;

		if ((codeDisplayTextEn != null) && (codeDisplayTextEn.length() == 0)) {
			codeDtoCacheModel.codeDisplayTextEn = null;
		}

		codeDtoCacheModel.codeDisplayTextChi = getCodeDisplayTextChi();

		String codeDisplayTextChi = codeDtoCacheModel.codeDisplayTextChi;

		if ((codeDisplayTextChi != null) && (codeDisplayTextChi.length() == 0)) {
			codeDtoCacheModel.codeDisplayTextChi = null;
		}

		codeDtoCacheModel.codeActive = getCodeActive();

		codeDtoCacheModel.subcodeEnabled = getSubcodeEnabled();

		codeDtoCacheModel.codeRemarks = getCodeRemarks();

		String codeRemarks = codeDtoCacheModel.codeRemarks;

		if ((codeRemarks != null) && (codeRemarks.length() == 0)) {
			codeDtoCacheModel.codeRemarks = null;
		}

		codeDtoCacheModel.detailCode = getDetailCode();

		String detailCode = codeDtoCacheModel.detailCode;

		if ((detailCode != null) && (detailCode.length() == 0)) {
			codeDtoCacheModel.detailCode = null;
		}

		codeDtoCacheModel.seq = getSeq();

		codeDtoCacheModel.codeDetailDisplayTextEn = getCodeDetailDisplayTextEn();

		String codeDetailDisplayTextEn = codeDtoCacheModel.codeDetailDisplayTextEn;

		if ((codeDetailDisplayTextEn != null) &&
				(codeDetailDisplayTextEn.length() == 0)) {
			codeDtoCacheModel.codeDetailDisplayTextEn = null;
		}

		codeDtoCacheModel.codeDetailDisplayTextChi = getCodeDetailDisplayTextChi();

		String codeDetailDisplayTextChi = codeDtoCacheModel.codeDetailDisplayTextChi;

		if ((codeDetailDisplayTextChi != null) &&
				(codeDetailDisplayTextChi.length() == 0)) {
			codeDtoCacheModel.codeDetailDisplayTextChi = null;
		}

		codeDtoCacheModel.codeDetailActive = getCodeDetailActive();

		codeDtoCacheModel.level = getLevel();

		codeDtoCacheModel.upLevelId = getUpLevelId();

		codeDtoCacheModel.codeDetailRemarks = getCodeDetailRemarks();

		String codeDetailRemarks = codeDtoCacheModel.codeDetailRemarks;

		if ((codeDetailRemarks != null) && (codeDetailRemarks.length() == 0)) {
			codeDtoCacheModel.codeDetailRemarks = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			codeDtoCacheModel.createDate = createDate.getTime();
		}
		else {
			codeDtoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			codeDtoCacheModel.updateDate = updateDate.getTime();
		}
		else {
			codeDtoCacheModel.updateDate = Long.MIN_VALUE;
		}

		codeDtoCacheModel.createdBy = getCreatedBy();

		String createdBy = codeDtoCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			codeDtoCacheModel.createdBy = null;
		}

		codeDtoCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = codeDtoCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			codeDtoCacheModel.updatedBy = null;
		}

		return codeDtoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", masterCode=");
		sb.append(getMasterCode());
		sb.append(", codeDisplayTextEn=");
		sb.append(getCodeDisplayTextEn());
		sb.append(", codeDisplayTextChi=");
		sb.append(getCodeDisplayTextChi());
		sb.append(", codeActive=");
		sb.append(getCodeActive());
		sb.append(", subcodeEnabled=");
		sb.append(getSubcodeEnabled());
		sb.append(", codeRemarks=");
		sb.append(getCodeRemarks());
		sb.append(", detailCode=");
		sb.append(getDetailCode());
		sb.append(", seq=");
		sb.append(getSeq());
		sb.append(", codeDetailDisplayTextEn=");
		sb.append(getCodeDetailDisplayTextEn());
		sb.append(", codeDetailDisplayTextChi=");
		sb.append(getCodeDetailDisplayTextChi());
		sb.append(", codeDetailActive=");
		sb.append(getCodeDetailActive());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", upLevelId=");
		sb.append(getUpLevelId());
		sb.append(", codeDetailRemarks=");
		sb.append(getCodeDetailRemarks());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("hk.org.hkbh.cms.outpatient.model.CodeDto");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterCode</column-name><column-value><![CDATA[");
		sb.append(getMasterCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDisplayTextEn</column-name><column-value><![CDATA[");
		sb.append(getCodeDisplayTextEn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDisplayTextChi</column-name><column-value><![CDATA[");
		sb.append(getCodeDisplayTextChi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeActive</column-name><column-value><![CDATA[");
		sb.append(getCodeActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subcodeEnabled</column-name><column-value><![CDATA[");
		sb.append(getSubcodeEnabled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeRemarks</column-name><column-value><![CDATA[");
		sb.append(getCodeRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailCode</column-name><column-value><![CDATA[");
		sb.append(getDetailCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>seq</column-name><column-value><![CDATA[");
		sb.append(getSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDetailDisplayTextEn</column-name><column-value><![CDATA[");
		sb.append(getCodeDetailDisplayTextEn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDetailDisplayTextChi</column-name><column-value><![CDATA[");
		sb.append(getCodeDetailDisplayTextChi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDetailActive</column-name><column-value><![CDATA[");
		sb.append(getCodeDetailActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upLevelId</column-name><column-value><![CDATA[");
		sb.append(getUpLevelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDetailRemarks</column-name><column-value><![CDATA[");
		sb.append(getCodeDetailRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CodeDto.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CodeDto.class
		};
	private int _id;
	private String _masterCode;
	private String _originalMasterCode;
	private String _codeDisplayTextEn;
	private String _codeDisplayTextChi;
	private Boolean _codeActive;
	private Boolean _subcodeEnabled;
	private String _codeRemarks;
	private String _detailCode;
	private Integer _seq;
	private String _codeDetailDisplayTextEn;
	private String _codeDetailDisplayTextChi;
	private Boolean _codeDetailActive;
	private Integer _level;
	private Integer _upLevelId;
	private String _codeDetailRemarks;
	private Date _createDate;
	private Date _updateDate;
	private String _createdBy;
	private String _updatedBy;
	private long _columnBitmask;
	private CodeDto _escapedModel;
}