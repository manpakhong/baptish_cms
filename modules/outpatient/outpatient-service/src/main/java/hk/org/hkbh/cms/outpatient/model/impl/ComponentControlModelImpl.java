/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hk.org.hkbh.cms.outpatient.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import hk.org.hkbh.cms.outpatient.model.ComponentControl;
import hk.org.hkbh.cms.outpatient.model.ComponentControlModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ComponentControl service. Represents a row in the &quot;component_control&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ComponentControlModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ComponentControlImpl}.
 * </p>
 *
 * @author Dave Man
 * @see ComponentControlImpl
 * @see ComponentControl
 * @see ComponentControlModel
 * @generated
 */
@ProviderType
public class ComponentControlModelImpl extends BaseModelImpl<ComponentControl>
	implements ComponentControlModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a component control model instance should use the {@link ComponentControl} interface instead.
	 */
	public static final String TABLE_NAME = "component_control";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "user_id", Types.BIGINT },
			{ "user_role_id", Types.BIGINT },
			{ "component_id", Types.BIGINT },
			{ "create", Types.BOOLEAN },
			{ "read", Types.BOOLEAN },
			{ "update", Types.BOOLEAN },
			{ "delete", Types.BOOLEAN },
			{ "deny", Types.BOOLEAN },
			{ "visible", Types.BOOLEAN },
			{ "enable", Types.BOOLEAN },
			{ "control_desc", Types.VARCHAR },
			{ "create_date", Types.TIMESTAMP },
			{ "update_date", Types.TIMESTAMP },
			{ "created_by", Types.VARCHAR },
			{ "updated_by", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("user_role_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("component_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("read", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("update", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("delete", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("deny", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("visible", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("enable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("control_desc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("update_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updated_by", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table component_control (id LONG not null primary key,user_id LONG,user_role_id LONG,component_id LONG,create BOOLEAN,read BOOLEAN,update BOOLEAN,delete BOOLEAN,deny BOOLEAN,visible BOOLEAN,enable BOOLEAN,control_desc VARCHAR(75) null,create_date DATE null,update_date DATE null,created_by VARCHAR(75) null,updated_by VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table component_control";
	public static final String ORDER_BY_JPQL = " ORDER BY componentControl.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY component_control.id ASC";
	public static final String DATA_SOURCE = "cmsDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.hk.org.hkbh.cms.outpatient.model.ComponentControl"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.hk.org.hkbh.cms.outpatient.model.ComponentControl"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.hk.org.hkbh.cms.outpatient.model.ComponentControl"),
			true);
	public static final long COMPONENTID_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long USERROLEID_COLUMN_BITMASK = 4L;
	public static final long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"lock.expiration.time.hk.org.hkbh.cms.outpatient.model.ComponentControl"));

	public ComponentControlModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ComponentControl.class;
	}

	@Override
	public String getModelClassName() {
		return ComponentControl.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("userRoleId", getUserRoleId());
		attributes.put("componentId", getComponentId());
		attributes.put("create", getCreate());
		attributes.put("read", getRead());
		attributes.put("update", getUpdate());
		attributes.put("delete", getDelete());
		attributes.put("deny", getDeny());
		attributes.put("visible", getVisible());
		attributes.put("enable", getEnable());
		attributes.put("control_desc", getControl_desc());
		attributes.put("createDate", getCreateDate());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedBy", getUpdatedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long userRoleId = (Long)attributes.get("userRoleId");

		if (userRoleId != null) {
			setUserRoleId(userRoleId);
		}

		Long componentId = (Long)attributes.get("componentId");

		if (componentId != null) {
			setComponentId(componentId);
		}

		Boolean create = (Boolean)attributes.get("create");

		if (create != null) {
			setCreate(create);
		}

		Boolean read = (Boolean)attributes.get("read");

		if (read != null) {
			setRead(read);
		}

		Boolean update = (Boolean)attributes.get("update");

		if (update != null) {
			setUpdate(update);
		}

		Boolean delete = (Boolean)attributes.get("delete");

		if (delete != null) {
			setDelete(delete);
		}

		Boolean deny = (Boolean)attributes.get("deny");

		if (deny != null) {
			setDeny(deny);
		}

		Boolean visible = (Boolean)attributes.get("visible");

		if (visible != null) {
			setVisible(visible);
		}

		Boolean enable = (Boolean)attributes.get("enable");

		if (enable != null) {
			setEnable(enable);
		}

		String control_desc = (String)attributes.get("control_desc");

		if (control_desc != null) {
			setControl_desc(control_desc);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public Long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(Long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public Long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Long getUserRoleId() {
		return _userRoleId;
	}

	@Override
	public void setUserRoleId(Long userRoleId) {
		_columnBitmask |= USERROLEID_COLUMN_BITMASK;

		if (!_setOriginalUserRoleId) {
			_setOriginalUserRoleId = true;

			_originalUserRoleId = _userRoleId;
		}

		_userRoleId = userRoleId;
	}

	public Long getOriginalUserRoleId() {
		return _originalUserRoleId;
	}

	@Override
	public Long getComponentId() {
		return _componentId;
	}

	@Override
	public void setComponentId(Long componentId) {
		_columnBitmask |= COMPONENTID_COLUMN_BITMASK;

		if (!_setOriginalComponentId) {
			_setOriginalComponentId = true;

			_originalComponentId = _componentId;
		}

		_componentId = componentId;
	}

	public Long getOriginalComponentId() {
		return _originalComponentId;
	}

	@Override
	public Boolean getCreate() {
		return _create;
	}

	@Override
	public void setCreate(Boolean create) {
		_create = create;
	}

	@Override
	public Boolean getRead() {
		return _read;
	}

	@Override
	public void setRead(Boolean read) {
		_read = read;
	}

	@Override
	public Boolean getUpdate() {
		return _update;
	}

	@Override
	public void setUpdate(Boolean update) {
		_update = update;
	}

	@Override
	public Boolean getDelete() {
		return _delete;
	}

	@Override
	public void setDelete(Boolean delete) {
		_delete = delete;
	}

	@Override
	public Boolean getDeny() {
		return _deny;
	}

	@Override
	public void setDeny(Boolean deny) {
		_deny = deny;
	}

	@Override
	public Boolean getVisible() {
		return _visible;
	}

	@Override
	public void setVisible(Boolean visible) {
		_visible = visible;
	}

	@Override
	public Boolean getEnable() {
		return _enable;
	}

	@Override
	public void setEnable(Boolean enable) {
		_enable = enable;
	}

	@Override
	public String getControl_desc() {
		if (_control_desc == null) {
			return "";
		}
		else {
			return _control_desc;
		}
	}

	@Override
	public void setControl_desc(String control_desc) {
		_control_desc = control_desc;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return "";
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ComponentControl.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ComponentControl toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ComponentControl)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ComponentControlImpl componentControlImpl = new ComponentControlImpl();

		componentControlImpl.setId(getId());
		componentControlImpl.setUserId(getUserId());
		componentControlImpl.setUserRoleId(getUserRoleId());
		componentControlImpl.setComponentId(getComponentId());
		componentControlImpl.setCreate(getCreate());
		componentControlImpl.setRead(getRead());
		componentControlImpl.setUpdate(getUpdate());
		componentControlImpl.setDelete(getDelete());
		componentControlImpl.setDeny(getDeny());
		componentControlImpl.setVisible(getVisible());
		componentControlImpl.setEnable(getEnable());
		componentControlImpl.setControl_desc(getControl_desc());
		componentControlImpl.setCreateDate(getCreateDate());
		componentControlImpl.setUpdateDate(getUpdateDate());
		componentControlImpl.setCreatedBy(getCreatedBy());
		componentControlImpl.setUpdatedBy(getUpdatedBy());

		componentControlImpl.resetOriginalValues();

		return componentControlImpl;
	}

	@Override
	public int compareTo(ComponentControl componentControl) {
		int value = 0;

		if (getId() < componentControl.getId()) {
			value = -1;
		}
		else if (getId() > componentControl.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ComponentControl)) {
			return false;
		}

		ComponentControl componentControl = (ComponentControl)obj;

		long primaryKey = componentControl.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ComponentControlModelImpl componentControlModelImpl = this;

		componentControlModelImpl._originalUserId = componentControlModelImpl._userId;

		componentControlModelImpl._setOriginalUserId = false;

		componentControlModelImpl._originalUserRoleId = componentControlModelImpl._userRoleId;

		componentControlModelImpl._setOriginalUserRoleId = false;

		componentControlModelImpl._originalComponentId = componentControlModelImpl._componentId;

		componentControlModelImpl._setOriginalComponentId = false;

		componentControlModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ComponentControl> toCacheModel() {
		ComponentControlCacheModel componentControlCacheModel = new ComponentControlCacheModel();

		componentControlCacheModel.id = getId();

		componentControlCacheModel.userId = getUserId();

		componentControlCacheModel.userRoleId = getUserRoleId();

		componentControlCacheModel.componentId = getComponentId();

		componentControlCacheModel.create = getCreate();

		componentControlCacheModel.read = getRead();

		componentControlCacheModel.update = getUpdate();

		componentControlCacheModel.delete = getDelete();

		componentControlCacheModel.deny = getDeny();

		componentControlCacheModel.visible = getVisible();

		componentControlCacheModel.enable = getEnable();

		componentControlCacheModel.control_desc = getControl_desc();

		String control_desc = componentControlCacheModel.control_desc;

		if ((control_desc != null) && (control_desc.length() == 0)) {
			componentControlCacheModel.control_desc = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			componentControlCacheModel.createDate = createDate.getTime();
		}
		else {
			componentControlCacheModel.createDate = Long.MIN_VALUE;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			componentControlCacheModel.updateDate = updateDate.getTime();
		}
		else {
			componentControlCacheModel.updateDate = Long.MIN_VALUE;
		}

		componentControlCacheModel.createdBy = getCreatedBy();

		String createdBy = componentControlCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			componentControlCacheModel.createdBy = null;
		}

		componentControlCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = componentControlCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			componentControlCacheModel.updatedBy = null;
		}

		return componentControlCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userRoleId=");
		sb.append(getUserRoleId());
		sb.append(", componentId=");
		sb.append(getComponentId());
		sb.append(", create=");
		sb.append(getCreate());
		sb.append(", read=");
		sb.append(getRead());
		sb.append(", update=");
		sb.append(getUpdate());
		sb.append(", delete=");
		sb.append(getDelete());
		sb.append(", deny=");
		sb.append(getDeny());
		sb.append(", visible=");
		sb.append(getVisible());
		sb.append(", enable=");
		sb.append(getEnable());
		sb.append(", control_desc=");
		sb.append(getControl_desc());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("hk.org.hkbh.cms.outpatient.model.ComponentControl");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userRoleId</column-name><column-value><![CDATA[");
		sb.append(getUserRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentId</column-name><column-value><![CDATA[");
		sb.append(getComponentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>create</column-name><column-value><![CDATA[");
		sb.append(getCreate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>read</column-name><column-value><![CDATA[");
		sb.append(getRead());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>update</column-name><column-value><![CDATA[");
		sb.append(getUpdate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>delete</column-name><column-value><![CDATA[");
		sb.append(getDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deny</column-name><column-value><![CDATA[");
		sb.append(getDeny());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visible</column-name><column-value><![CDATA[");
		sb.append(getVisible());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enable</column-name><column-value><![CDATA[");
		sb.append(getEnable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>control_desc</column-name><column-value><![CDATA[");
		sb.append(getControl_desc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ComponentControl.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ComponentControl.class
		};
	private long _id;
	private Long _userId;
	private Long _originalUserId;
	private boolean _setOriginalUserId;
	private Long _userRoleId;
	private Long _originalUserRoleId;
	private boolean _setOriginalUserRoleId;
	private Long _componentId;
	private Long _originalComponentId;
	private boolean _setOriginalComponentId;
	private Boolean _create;
	private Boolean _read;
	private Boolean _update;
	private Boolean _delete;
	private Boolean _deny;
	private Boolean _visible;
	private Boolean _enable;
	private String _control_desc;
	private Date _createDate;
	private Date _updateDate;
	private String _createdBy;
	private String _updatedBy;
	private long _columnBitmask;
	private ComponentControl _escapedModel;
}