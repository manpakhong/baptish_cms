/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hk.org.hkbh.cms.outpatient.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import hk.org.hkbh.cms.outpatient.model.ComponentDto;
import hk.org.hkbh.cms.outpatient.model.ComponentDtoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ComponentDto service. Represents a row in the &quot;Op_ComponentDto&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ComponentDtoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ComponentDtoImpl}.
 * </p>
 *
 * @author Dave Man
 * @see ComponentDtoImpl
 * @see ComponentDto
 * @see ComponentDtoModel
 * @generated
 */
@ProviderType
public class ComponentDtoModelImpl extends BaseModelImpl<ComponentDto>
	implements ComponentDtoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a component dto model instance should use the {@link ComponentDto} interface instead.
	 */
	public static final String TABLE_NAME = "Op_ComponentDto";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "component_code", Types.VARCHAR },
			{ "component_name", Types.VARCHAR },
			{ "component_type_code_id", Types.BIGINT },
			{ "detail_code", Types.VARCHAR },
			{ "code_detail_seq", Types.INTEGER },
			{ "code_detail_display_text_en", Types.VARCHAR },
			{ "code_detail_display_text_chi", Types.VARCHAR },
			{ "component_seq", Types.INTEGER },
			{ "is_menu_item", Types.BOOLEAN },
			{ "component_desc", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "component_level", Types.INTEGER },
			{ "up_component_id", Types.BIGINT },
			{ "create_date", Types.TIMESTAMP },
			{ "update_date", Types.TIMESTAMP },
			{ "created_by", Types.VARCHAR },
			{ "updated_by", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("component_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("component_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("component_type_code_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("detail_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_detail_seq", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("code_detail_display_text_en", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_detail_display_text_chi", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("component_seq", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("is_menu_item", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("component_desc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("component_level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("up_component_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("update_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updated_by", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Op_ComponentDto (id LONG not null primary key,component_code VARCHAR(75) null,component_name VARCHAR(75) null,component_type_code_id LONG,detail_code VARCHAR(75) null,code_detail_seq INTEGER,code_detail_display_text_en VARCHAR(75) null,code_detail_display_text_chi VARCHAR(75) null,component_seq INTEGER,is_menu_item BOOLEAN,component_desc VARCHAR(75) null,url VARCHAR(75) null,component_level INTEGER,up_component_id LONG,create_date DATE null,update_date DATE null,created_by VARCHAR(75) null,updated_by VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Op_ComponentDto";
	public static final String ORDER_BY_JPQL = " ORDER BY componentDto.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Op_ComponentDto.id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.hk.org.hkbh.cms.outpatient.model.ComponentDto"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.hk.org.hkbh.cms.outpatient.model.ComponentDto"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.hk.org.hkbh.cms.outpatient.model.ComponentDto"),
			true);
	public static final long COMPONENTCODE_COLUMN_BITMASK = 1L;
	public static final long COMPONENTLEVEL_COLUMN_BITMASK = 2L;
	public static final long ID_COLUMN_BITMASK = 4L;
	public static final long ISMENUITEM_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"lock.expiration.time.hk.org.hkbh.cms.outpatient.model.ComponentDto"));

	public ComponentDtoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ComponentDto.class;
	}

	@Override
	public String getModelClassName() {
		return ComponentDto.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("componentCode", getComponentCode());
		attributes.put("componentName", getComponentName());
		attributes.put("componentTypeCodeId", getComponentTypeCodeId());
		attributes.put("detailCode", getDetailCode());
		attributes.put("codeDetailSeq", getCodeDetailSeq());
		attributes.put("codeDetailDisplayTextEn", getCodeDetailDisplayTextEn());
		attributes.put("codeDetailDisplayTextChi", getCodeDetailDisplayTextChi());
		attributes.put("componentSeq", getComponentSeq());
		attributes.put("isMenuItem", getIsMenuItem());
		attributes.put("componentDesc", getComponentDesc());
		attributes.put("url", getUrl());
		attributes.put("componentLevel", getComponentLevel());
		attributes.put("upComponentId", getUpComponentId());
		attributes.put("createDate", getCreateDate());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedBy", getUpdatedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String componentCode = (String)attributes.get("componentCode");

		if (componentCode != null) {
			setComponentCode(componentCode);
		}

		String componentName = (String)attributes.get("componentName");

		if (componentName != null) {
			setComponentName(componentName);
		}

		Long componentTypeCodeId = (Long)attributes.get("componentTypeCodeId");

		if (componentTypeCodeId != null) {
			setComponentTypeCodeId(componentTypeCodeId);
		}

		String detailCode = (String)attributes.get("detailCode");

		if (detailCode != null) {
			setDetailCode(detailCode);
		}

		Integer codeDetailSeq = (Integer)attributes.get("codeDetailSeq");

		if (codeDetailSeq != null) {
			setCodeDetailSeq(codeDetailSeq);
		}

		String codeDetailDisplayTextEn = (String)attributes.get(
				"codeDetailDisplayTextEn");

		if (codeDetailDisplayTextEn != null) {
			setCodeDetailDisplayTextEn(codeDetailDisplayTextEn);
		}

		String codeDetailDisplayTextChi = (String)attributes.get(
				"codeDetailDisplayTextChi");

		if (codeDetailDisplayTextChi != null) {
			setCodeDetailDisplayTextChi(codeDetailDisplayTextChi);
		}

		Integer componentSeq = (Integer)attributes.get("componentSeq");

		if (componentSeq != null) {
			setComponentSeq(componentSeq);
		}

		Boolean isMenuItem = (Boolean)attributes.get("isMenuItem");

		if (isMenuItem != null) {
			setIsMenuItem(isMenuItem);
		}

		String componentDesc = (String)attributes.get("componentDesc");

		if (componentDesc != null) {
			setComponentDesc(componentDesc);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Integer componentLevel = (Integer)attributes.get("componentLevel");

		if (componentLevel != null) {
			setComponentLevel(componentLevel);
		}

		Long upComponentId = (Long)attributes.get("upComponentId");

		if (upComponentId != null) {
			setUpComponentId(upComponentId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@Override
	public String getComponentCode() {
		if (_componentCode == null) {
			return "";
		}
		else {
			return _componentCode;
		}
	}

	@Override
	public void setComponentCode(String componentCode) {
		_columnBitmask |= COMPONENTCODE_COLUMN_BITMASK;

		if (_originalComponentCode == null) {
			_originalComponentCode = _componentCode;
		}

		_componentCode = componentCode;
	}

	public String getOriginalComponentCode() {
		return GetterUtil.getString(_originalComponentCode);
	}

	@Override
	public String getComponentName() {
		if (_componentName == null) {
			return "";
		}
		else {
			return _componentName;
		}
	}

	@Override
	public void setComponentName(String componentName) {
		_componentName = componentName;
	}

	@Override
	public Long getComponentTypeCodeId() {
		return _componentTypeCodeId;
	}

	@Override
	public void setComponentTypeCodeId(Long componentTypeCodeId) {
		_componentTypeCodeId = componentTypeCodeId;
	}

	@Override
	public String getDetailCode() {
		if (_detailCode == null) {
			return "";
		}
		else {
			return _detailCode;
		}
	}

	@Override
	public void setDetailCode(String detailCode) {
		_detailCode = detailCode;
	}

	@Override
	public Integer getCodeDetailSeq() {
		return _codeDetailSeq;
	}

	@Override
	public void setCodeDetailSeq(Integer codeDetailSeq) {
		_codeDetailSeq = codeDetailSeq;
	}

	@Override
	public String getCodeDetailDisplayTextEn() {
		if (_codeDetailDisplayTextEn == null) {
			return "";
		}
		else {
			return _codeDetailDisplayTextEn;
		}
	}

	@Override
	public void setCodeDetailDisplayTextEn(String codeDetailDisplayTextEn) {
		_codeDetailDisplayTextEn = codeDetailDisplayTextEn;
	}

	@Override
	public String getCodeDetailDisplayTextChi() {
		if (_codeDetailDisplayTextChi == null) {
			return "";
		}
		else {
			return _codeDetailDisplayTextChi;
		}
	}

	@Override
	public void setCodeDetailDisplayTextChi(String codeDetailDisplayTextChi) {
		_codeDetailDisplayTextChi = codeDetailDisplayTextChi;
	}

	@Override
	public Integer getComponentSeq() {
		return _componentSeq;
	}

	@Override
	public void setComponentSeq(Integer componentSeq) {
		_componentSeq = componentSeq;
	}

	@Override
	public Boolean getIsMenuItem() {
		return _isMenuItem;
	}

	@Override
	public void setIsMenuItem(Boolean isMenuItem) {
		_columnBitmask |= ISMENUITEM_COLUMN_BITMASK;

		if (!_setOriginalIsMenuItem) {
			_setOriginalIsMenuItem = true;

			_originalIsMenuItem = _isMenuItem;
		}

		_isMenuItem = isMenuItem;
	}

	public Boolean getOriginalIsMenuItem() {
		return _originalIsMenuItem;
	}

	@Override
	public String getComponentDesc() {
		if (_componentDesc == null) {
			return "";
		}
		else {
			return _componentDesc;
		}
	}

	@Override
	public void setComponentDesc(String componentDesc) {
		_componentDesc = componentDesc;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public Integer getComponentLevel() {
		return _componentLevel;
	}

	@Override
	public void setComponentLevel(Integer componentLevel) {
		_columnBitmask |= COMPONENTLEVEL_COLUMN_BITMASK;

		if (!_setOriginalComponentLevel) {
			_setOriginalComponentLevel = true;

			_originalComponentLevel = _componentLevel;
		}

		_componentLevel = componentLevel;
	}

	public Integer getOriginalComponentLevel() {
		return _originalComponentLevel;
	}

	@Override
	public Long getUpComponentId() {
		return _upComponentId;
	}

	@Override
	public void setUpComponentId(Long upComponentId) {
		_upComponentId = upComponentId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return "";
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ComponentDto.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ComponentDto toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ComponentDto)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ComponentDtoImpl componentDtoImpl = new ComponentDtoImpl();

		componentDtoImpl.setId(getId());
		componentDtoImpl.setComponentCode(getComponentCode());
		componentDtoImpl.setComponentName(getComponentName());
		componentDtoImpl.setComponentTypeCodeId(getComponentTypeCodeId());
		componentDtoImpl.setDetailCode(getDetailCode());
		componentDtoImpl.setCodeDetailSeq(getCodeDetailSeq());
		componentDtoImpl.setCodeDetailDisplayTextEn(getCodeDetailDisplayTextEn());
		componentDtoImpl.setCodeDetailDisplayTextChi(getCodeDetailDisplayTextChi());
		componentDtoImpl.setComponentSeq(getComponentSeq());
		componentDtoImpl.setIsMenuItem(getIsMenuItem());
		componentDtoImpl.setComponentDesc(getComponentDesc());
		componentDtoImpl.setUrl(getUrl());
		componentDtoImpl.setComponentLevel(getComponentLevel());
		componentDtoImpl.setUpComponentId(getUpComponentId());
		componentDtoImpl.setCreateDate(getCreateDate());
		componentDtoImpl.setUpdateDate(getUpdateDate());
		componentDtoImpl.setCreatedBy(getCreatedBy());
		componentDtoImpl.setUpdatedBy(getUpdatedBy());

		componentDtoImpl.resetOriginalValues();

		return componentDtoImpl;
	}

	@Override
	public int compareTo(ComponentDto componentDto) {
		int value = 0;

		if (getId() < componentDto.getId()) {
			value = -1;
		}
		else if (getId() > componentDto.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ComponentDto)) {
			return false;
		}

		ComponentDto componentDto = (ComponentDto)obj;

		long primaryKey = componentDto.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ComponentDtoModelImpl componentDtoModelImpl = this;

		componentDtoModelImpl._originalId = componentDtoModelImpl._id;

		componentDtoModelImpl._setOriginalId = false;

		componentDtoModelImpl._originalComponentCode = componentDtoModelImpl._componentCode;

		componentDtoModelImpl._originalIsMenuItem = componentDtoModelImpl._isMenuItem;

		componentDtoModelImpl._setOriginalIsMenuItem = false;

		componentDtoModelImpl._originalComponentLevel = componentDtoModelImpl._componentLevel;

		componentDtoModelImpl._setOriginalComponentLevel = false;

		componentDtoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ComponentDto> toCacheModel() {
		ComponentDtoCacheModel componentDtoCacheModel = new ComponentDtoCacheModel();

		componentDtoCacheModel.id = getId();

		componentDtoCacheModel.componentCode = getComponentCode();

		String componentCode = componentDtoCacheModel.componentCode;

		if ((componentCode != null) && (componentCode.length() == 0)) {
			componentDtoCacheModel.componentCode = null;
		}

		componentDtoCacheModel.componentName = getComponentName();

		String componentName = componentDtoCacheModel.componentName;

		if ((componentName != null) && (componentName.length() == 0)) {
			componentDtoCacheModel.componentName = null;
		}

		componentDtoCacheModel.componentTypeCodeId = getComponentTypeCodeId();

		componentDtoCacheModel.detailCode = getDetailCode();

		String detailCode = componentDtoCacheModel.detailCode;

		if ((detailCode != null) && (detailCode.length() == 0)) {
			componentDtoCacheModel.detailCode = null;
		}

		componentDtoCacheModel.codeDetailSeq = getCodeDetailSeq();

		componentDtoCacheModel.codeDetailDisplayTextEn = getCodeDetailDisplayTextEn();

		String codeDetailDisplayTextEn = componentDtoCacheModel.codeDetailDisplayTextEn;

		if ((codeDetailDisplayTextEn != null) &&
				(codeDetailDisplayTextEn.length() == 0)) {
			componentDtoCacheModel.codeDetailDisplayTextEn = null;
		}

		componentDtoCacheModel.codeDetailDisplayTextChi = getCodeDetailDisplayTextChi();

		String codeDetailDisplayTextChi = componentDtoCacheModel.codeDetailDisplayTextChi;

		if ((codeDetailDisplayTextChi != null) &&
				(codeDetailDisplayTextChi.length() == 0)) {
			componentDtoCacheModel.codeDetailDisplayTextChi = null;
		}

		componentDtoCacheModel.componentSeq = getComponentSeq();

		componentDtoCacheModel.isMenuItem = getIsMenuItem();

		componentDtoCacheModel.componentDesc = getComponentDesc();

		String componentDesc = componentDtoCacheModel.componentDesc;

		if ((componentDesc != null) && (componentDesc.length() == 0)) {
			componentDtoCacheModel.componentDesc = null;
		}

		componentDtoCacheModel.url = getUrl();

		String url = componentDtoCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			componentDtoCacheModel.url = null;
		}

		componentDtoCacheModel.componentLevel = getComponentLevel();

		componentDtoCacheModel.upComponentId = getUpComponentId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			componentDtoCacheModel.createDate = createDate.getTime();
		}
		else {
			componentDtoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			componentDtoCacheModel.updateDate = updateDate.getTime();
		}
		else {
			componentDtoCacheModel.updateDate = Long.MIN_VALUE;
		}

		componentDtoCacheModel.createdBy = getCreatedBy();

		String createdBy = componentDtoCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			componentDtoCacheModel.createdBy = null;
		}

		componentDtoCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = componentDtoCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			componentDtoCacheModel.updatedBy = null;
		}

		return componentDtoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", componentCode=");
		sb.append(getComponentCode());
		sb.append(", componentName=");
		sb.append(getComponentName());
		sb.append(", componentTypeCodeId=");
		sb.append(getComponentTypeCodeId());
		sb.append(", detailCode=");
		sb.append(getDetailCode());
		sb.append(", codeDetailSeq=");
		sb.append(getCodeDetailSeq());
		sb.append(", codeDetailDisplayTextEn=");
		sb.append(getCodeDetailDisplayTextEn());
		sb.append(", codeDetailDisplayTextChi=");
		sb.append(getCodeDetailDisplayTextChi());
		sb.append(", componentSeq=");
		sb.append(getComponentSeq());
		sb.append(", isMenuItem=");
		sb.append(getIsMenuItem());
		sb.append(", componentDesc=");
		sb.append(getComponentDesc());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", componentLevel=");
		sb.append(getComponentLevel());
		sb.append(", upComponentId=");
		sb.append(getUpComponentId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("hk.org.hkbh.cms.outpatient.model.ComponentDto");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentCode</column-name><column-value><![CDATA[");
		sb.append(getComponentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentName</column-name><column-value><![CDATA[");
		sb.append(getComponentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentTypeCodeId</column-name><column-value><![CDATA[");
		sb.append(getComponentTypeCodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailCode</column-name><column-value><![CDATA[");
		sb.append(getDetailCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDetailSeq</column-name><column-value><![CDATA[");
		sb.append(getCodeDetailSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDetailDisplayTextEn</column-name><column-value><![CDATA[");
		sb.append(getCodeDetailDisplayTextEn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeDetailDisplayTextChi</column-name><column-value><![CDATA[");
		sb.append(getCodeDetailDisplayTextChi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentSeq</column-name><column-value><![CDATA[");
		sb.append(getComponentSeq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isMenuItem</column-name><column-value><![CDATA[");
		sb.append(getIsMenuItem());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentDesc</column-name><column-value><![CDATA[");
		sb.append(getComponentDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>componentLevel</column-name><column-value><![CDATA[");
		sb.append(getComponentLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>upComponentId</column-name><column-value><![CDATA[");
		sb.append(getUpComponentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ComponentDto.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ComponentDto.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private String _componentCode;
	private String _originalComponentCode;
	private String _componentName;
	private Long _componentTypeCodeId;
	private String _detailCode;
	private Integer _codeDetailSeq;
	private String _codeDetailDisplayTextEn;
	private String _codeDetailDisplayTextChi;
	private Integer _componentSeq;
	private Boolean _isMenuItem;
	private Boolean _originalIsMenuItem;
	private boolean _setOriginalIsMenuItem;
	private String _componentDesc;
	private String _url;
	private Integer _componentLevel;
	private Integer _originalComponentLevel;
	private boolean _setOriginalComponentLevel;
	private Long _upComponentId;
	private Date _createDate;
	private Date _updateDate;
	private String _createdBy;
	private String _updatedBy;
	private long _columnBitmask;
	private ComponentDto _escapedModel;
}