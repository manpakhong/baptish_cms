/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package hk.org.hkbh.cms.outpatient.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import hk.org.hkbh.cms.outpatient.model.ClinicalNoteTemplate;
import hk.org.hkbh.cms.outpatient.model.ClinicalNoteTemplateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ClinicalNoteTemplate service. Represents a row in the &quot;clinical_note_template&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ClinicalNoteTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClinicalNoteTemplateImpl}.
 * </p>
 *
 * @author Dave Man
 * @see ClinicalNoteTemplateImpl
 * @see ClinicalNoteTemplate
 * @see ClinicalNoteTemplateModel
 * @generated
 */
@ProviderType
public class ClinicalNoteTemplateModelImpl extends BaseModelImpl<ClinicalNoteTemplate>
	implements ClinicalNoteTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a clinical note template model instance should use the {@link ClinicalNoteTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "clinical_note_template";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "user_id", Types.BIGINT },
			{ "template_type_code_id", Types.BIGINT },
			{ "template_name", Types.VARCHAR },
			{ "template_content", Types.VARCHAR },
			{ "template_content_html", Types.VARCHAR },
			{ "create_date", Types.TIMESTAMP },
			{ "update_date", Types.TIMESTAMP },
			{ "created_by", Types.VARCHAR },
			{ "updated_by", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("user_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("template_type_code_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("template_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("template_content", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("template_content_html", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("create_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("update_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("created_by", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("updated_by", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table clinical_note_template (id LONG not null primary key,user_id LONG,template_type_code_id LONG,template_name VARCHAR(75) null,template_content VARCHAR(75) null,template_content_html VARCHAR(75) null,create_date DATE null,update_date DATE null,created_by VARCHAR(75) null,updated_by VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table clinical_note_template";
	public static final String ORDER_BY_JPQL = " ORDER BY clinicalNoteTemplate.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY clinical_note_template.id ASC";
	public static final String DATA_SOURCE = "cmsDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.hk.org.hkbh.cms.outpatient.model.ClinicalNoteTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.hk.org.hkbh.cms.outpatient.model.ClinicalNoteTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(hk.org.hkbh.cms.outpatient.service.util.ServiceProps.get(
				"lock.expiration.time.hk.org.hkbh.cms.outpatient.model.ClinicalNoteTemplate"));

	public ClinicalNoteTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ClinicalNoteTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return ClinicalNoteTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userId", getUserId());
		attributes.put("templateTypeCodeId", getTemplateTypeCodeId());
		attributes.put("templateName", getTemplateName());
		attributes.put("templateContent", getTemplateContent());
		attributes.put("templateContentHtml", getTemplateContentHtml());
		attributes.put("createDate", getCreateDate());
		attributes.put("updateDate", getUpdateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("updatedBy", getUpdatedBy());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long templateTypeCodeId = (Long)attributes.get("templateTypeCodeId");

		if (templateTypeCodeId != null) {
			setTemplateTypeCodeId(templateTypeCodeId);
		}

		String templateName = (String)attributes.get("templateName");

		if (templateName != null) {
			setTemplateName(templateName);
		}

		String templateContent = (String)attributes.get("templateContent");

		if (templateContent != null) {
			setTemplateContent(templateContent);
		}

		String templateContentHtml = (String)attributes.get(
				"templateContentHtml");

		if (templateContentHtml != null) {
			setTemplateContentHtml(templateContentHtml);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date updateDate = (Date)attributes.get("updateDate");

		if (updateDate != null) {
			setUpdateDate(updateDate);
		}

		String createdBy = (String)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String updatedBy = (String)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public Long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(Long userId) {
		_userId = userId;
	}

	@Override
	public Long getTemplateTypeCodeId() {
		return _templateTypeCodeId;
	}

	@Override
	public void setTemplateTypeCodeId(Long templateTypeCodeId) {
		_templateTypeCodeId = templateTypeCodeId;
	}

	@Override
	public String getTemplateName() {
		if (_templateName == null) {
			return "";
		}
		else {
			return _templateName;
		}
	}

	@Override
	public void setTemplateName(String templateName) {
		_templateName = templateName;
	}

	@Override
	public String getTemplateContent() {
		if (_templateContent == null) {
			return "";
		}
		else {
			return _templateContent;
		}
	}

	@Override
	public void setTemplateContent(String templateContent) {
		_templateContent = templateContent;
	}

	@Override
	public String getTemplateContentHtml() {
		if (_templateContentHtml == null) {
			return "";
		}
		else {
			return _templateContentHtml;
		}
	}

	@Override
	public void setTemplateContentHtml(String templateContentHtml) {
		_templateContentHtml = templateContentHtml;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getUpdateDate() {
		return _updateDate;
	}

	@Override
	public void setUpdateDate(Date updateDate) {
		_updateDate = updateDate;
	}

	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public String getUpdatedBy() {
		if (_updatedBy == null) {
			return "";
		}
		else {
			return _updatedBy;
		}
	}

	@Override
	public void setUpdatedBy(String updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ClinicalNoteTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ClinicalNoteTemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ClinicalNoteTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClinicalNoteTemplateImpl clinicalNoteTemplateImpl = new ClinicalNoteTemplateImpl();

		clinicalNoteTemplateImpl.setId(getId());
		clinicalNoteTemplateImpl.setUserId(getUserId());
		clinicalNoteTemplateImpl.setTemplateTypeCodeId(getTemplateTypeCodeId());
		clinicalNoteTemplateImpl.setTemplateName(getTemplateName());
		clinicalNoteTemplateImpl.setTemplateContent(getTemplateContent());
		clinicalNoteTemplateImpl.setTemplateContentHtml(getTemplateContentHtml());
		clinicalNoteTemplateImpl.setCreateDate(getCreateDate());
		clinicalNoteTemplateImpl.setUpdateDate(getUpdateDate());
		clinicalNoteTemplateImpl.setCreatedBy(getCreatedBy());
		clinicalNoteTemplateImpl.setUpdatedBy(getUpdatedBy());

		clinicalNoteTemplateImpl.resetOriginalValues();

		return clinicalNoteTemplateImpl;
	}

	@Override
	public int compareTo(ClinicalNoteTemplate clinicalNoteTemplate) {
		int value = 0;

		if (getId() < clinicalNoteTemplate.getId()) {
			value = -1;
		}
		else if (getId() > clinicalNoteTemplate.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ClinicalNoteTemplate)) {
			return false;
		}

		ClinicalNoteTemplate clinicalNoteTemplate = (ClinicalNoteTemplate)obj;

		long primaryKey = clinicalNoteTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ClinicalNoteTemplate> toCacheModel() {
		ClinicalNoteTemplateCacheModel clinicalNoteTemplateCacheModel = new ClinicalNoteTemplateCacheModel();

		clinicalNoteTemplateCacheModel.id = getId();

		clinicalNoteTemplateCacheModel.userId = getUserId();

		clinicalNoteTemplateCacheModel.templateTypeCodeId = getTemplateTypeCodeId();

		clinicalNoteTemplateCacheModel.templateName = getTemplateName();

		String templateName = clinicalNoteTemplateCacheModel.templateName;

		if ((templateName != null) && (templateName.length() == 0)) {
			clinicalNoteTemplateCacheModel.templateName = null;
		}

		clinicalNoteTemplateCacheModel.templateContent = getTemplateContent();

		String templateContent = clinicalNoteTemplateCacheModel.templateContent;

		if ((templateContent != null) && (templateContent.length() == 0)) {
			clinicalNoteTemplateCacheModel.templateContent = null;
		}

		clinicalNoteTemplateCacheModel.templateContentHtml = getTemplateContentHtml();

		String templateContentHtml = clinicalNoteTemplateCacheModel.templateContentHtml;

		if ((templateContentHtml != null) &&
				(templateContentHtml.length() == 0)) {
			clinicalNoteTemplateCacheModel.templateContentHtml = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			clinicalNoteTemplateCacheModel.createDate = createDate.getTime();
		}
		else {
			clinicalNoteTemplateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date updateDate = getUpdateDate();

		if (updateDate != null) {
			clinicalNoteTemplateCacheModel.updateDate = updateDate.getTime();
		}
		else {
			clinicalNoteTemplateCacheModel.updateDate = Long.MIN_VALUE;
		}

		clinicalNoteTemplateCacheModel.createdBy = getCreatedBy();

		String createdBy = clinicalNoteTemplateCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			clinicalNoteTemplateCacheModel.createdBy = null;
		}

		clinicalNoteTemplateCacheModel.updatedBy = getUpdatedBy();

		String updatedBy = clinicalNoteTemplateCacheModel.updatedBy;

		if ((updatedBy != null) && (updatedBy.length() == 0)) {
			clinicalNoteTemplateCacheModel.updatedBy = null;
		}

		return clinicalNoteTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", templateTypeCodeId=");
		sb.append(getTemplateTypeCodeId());
		sb.append(", templateName=");
		sb.append(getTemplateName());
		sb.append(", templateContent=");
		sb.append(getTemplateContent());
		sb.append(", templateContentHtml=");
		sb.append(getTemplateContentHtml());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", updateDate=");
		sb.append(getUpdateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("hk.org.hkbh.cms.outpatient.model.ClinicalNoteTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateTypeCodeId</column-name><column-value><![CDATA[");
		sb.append(getTemplateTypeCodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateName</column-name><column-value><![CDATA[");
		sb.append(getTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateContent</column-name><column-value><![CDATA[");
		sb.append(getTemplateContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateContentHtml</column-name><column-value><![CDATA[");
		sb.append(getTemplateContentHtml());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateDate</column-name><column-value><![CDATA[");
		sb.append(getUpdateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ClinicalNoteTemplate.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ClinicalNoteTemplate.class
		};
	private long _id;
	private Long _userId;
	private Long _templateTypeCodeId;
	private String _templateName;
	private String _templateContent;
	private String _templateContentHtml;
	private Date _createDate;
	private Date _updateDate;
	private String _createdBy;
	private String _updatedBy;
	private ClinicalNoteTemplate _escapedModel;
}